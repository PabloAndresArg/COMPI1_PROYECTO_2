/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var graProyecto = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 10], $V1 = [1, 8], $V2 = [1, 9], $V3 = [2, 5, 10, 13], $V4 = [2, 5, 13];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "INICIO": 3, "LISTA_IMPORTES_CLASES": 4, "EOF": 5, "LISTA_IMPORTE": 6, "LISTA_CLASES": 7, "IMPORTE": 8, "SENTENCIA_CLASE": 9, "import": 10, "id": 11, ";": 12, "class": 13, "BLOQUE_DECLARACIONES_METFUNVAR": 14, "{": 15, "LISTA_DECLARACIONES_METFUNVAR": 16, "}": 17, "DECLARACION_AMBITO_CLASE": 18, "LISTA_DECLARACIONES_METFUNVAR_P": 19, "INSTRUCCIONES": 20, "INSTRUCCION": 21, "SENTENCIAIMPRIME": 22, "WHILE": 23, "IF": 24, "DOWHILE": 25, "SENTENCIA_FOR": 26, "SENTENCIA_SWITCH": 27, "ASIGNACION_SIMPLE": 28, "DECLARACION_ADENTRO_DE_METODOS_FUNCIONES": 29, "TIPO": 30, "int": 31, "String": 32, "boolean": 33, "double": 34, "char": 35, "for": 36, "(": 37, "DEC_for": 38, "EXPRESION": 39, "INCRE_DECRE": 40, ")": 41, "BLOQUE_INSTRUCCIONES": 42, "=": 43, "incremento": 44, "decremento": 45, "do": 46, "while": 47, "CONDICION": 48, "System": 49, ".": 50, "out": 51, "OPCIONIMPRIME": 52, "println": 53, "print": 54, "PRINT": 55, "if": 56, "else": 57, "-": 58, "!": 59, "+": 60, "*": 61, "/": 62, "<": 63, ">": 64, ">=": 65, "<=": 66, "==": 67, "!=": 68, "||": 69, "&&": 70, "decimal": 71, "true": 72, "false": 73, "STRING_LITERAL": 74, "EXPRESION_METODO": 75, "caracter": 76, "entero": 77, "switch": 78, "BLOQUE_CASES": 79, "LISTACASES": 80, "OPCIONDEFAULT": 81, "default": 82, ":": 83, "BLOQUEINST_CON_OPCION_VACIA": 84, "SENTENCIA_BREAK": 85, "CASES_P": 86, "case": 87, "break": 88, "OPCION_ASIGNACION": 89, "SENTENCIA_LLAMA_METODO": 90, "LISTA_EXPRESIONES_LLAMADA_METODO": 91, "LISTA_EXPRESIONES_LLAMADA_METODOP": 92, ",": 93, "DECLARACION_ADENTRO_DE_METODOS_FUNCIONESP": 94, "LISTA_IDS": 95, "ASIGNACION": 96, "OPCION_ID_MAIN": 97, "main": 98, "void": 99, "OPCION_METODO_FUNCION": 100, "DECLARACION_AMBITO_CLASEP": 101, "LISTA_PARAMETROS_CON_TIPO": 102, "SENTENCIA_CONTINUE": 103, "continue": 104, "SENTENCIA_RETURN_METODO": 105, "return": 106, "SENTENCIA_RETURN_FUNCION": 107, "SENTENCIA_BREAK_CON_CICLO": 108, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 10: "import", 11: "id", 12: ";", 13: "class", 15: "{", 17: "}", 31: "int", 32: "String", 33: "boolean", 34: "double", 35: "char", 36: "for", 37: "(", 41: ")", 43: "=", 44: "incremento", 45: "decremento", 46: "do", 47: "while", 49: "System", 50: ".", 51: "out", 53: "println", 54: "print", 56: "if", 57: "else", 58: "-", 59: "!", 60: "+", 61: "*", 62: "/", 63: "<", 64: ">", 65: ">=", 66: "<=", 67: "==", 68: "!=", 69: "||", 70: "&&", 71: "decimal", 72: "true", 73: "false", 74: "STRING_LITERAL", 76: "caracter", 77: "entero", 78: "switch", 82: "default", 83: ":", 87: "case", 88: "break", 93: ",", 98: "main", 99: "void", 104: "continue", 106: "return" },
        productions_: [0, [3, 2], [3, 2], [3, 2], [3, 1], [4, 2], [6, 2], [6, 1], [7, 2], [7, 1], [8, 3], [9, 3], [9, 1], [14, 3], [14, 2], [14, 1], [16, 2], [16, 1], [19, 2], [19, 0], [20, 2], [20, 1], [20, 1], [21, 1], [21, 1], [21, 1], [21, 1], [21, 1], [21, 1], [21, 1], [21, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [26, 9], [38, 4], [38, 3], [40, 2], [40, 2], [25, 5], [22, 9], [52, 1], [52, 1], [55, 5], [23, 3], [24, 3], [24, 5], [24, 5], [48, 3], [42, 3], [42, 2], [39, 2], [39, 2], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 3], [39, 1], [39, 1], [39, 1], [39, 1], [39, 2], [39, 1], [39, 1], [39, 3], [27, 5], [79, 4], [79, 2], [81, 4], [81, 0], [80, 2], [80, 1], [86, 5], [85, 2], [84, 1], [84, 0], [28, 2], [89, 3], [89, 3], [75, 2], [75, 0], [90, 2], [90, 1], [91, 2], [92, 3], [92, 2], [92, 1], [29, 3], [94, 2], [95, 3], [95, 0], [96, 3], [96, 1], [97, 1], [97, 1], [18, 4], [18, 3], [101, 2], [101, 2], [100, 5], [100, 2], [102, 4], [102, 0], [103, 2], [105, 2], [107, 3], [108, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                case 2:
                case 3:
                    this.$ = new Tree($$[$0 - 1]);
                    console.log("se genera el arbol");
                    return this.$;
                    break;
                case 4:
                    this.$ = new Tree($$[$0]);
                    console.log("se genera el arbol");
                    return this.$;
                    break;
                case 5:
                    this.$ = new Inicio($$[$0 - 1], $$[$0]);
                    break;
                case 6:
                case 8:
                case 20:
                    this.$ = $$[$0 - 1];
                    this.$.push($$[$0]);
                    break;
                case 7:
                case 9:
                case 21:
                    this.$ = [$$[$0]];
                    break;
                case 10:
                    this.$ = new Importe($$[$0 - 1], $$[$0 - 1], this._$.first_line, this._$.first_column);
                    console.log('TOKEN:' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                    break;
                case 11:
                    this.$ = new ClaseInstruccion($$[$0 - 1], $$[$0 - 1], this._$.first_line, this._$.first_column);
                    console.log('TOKEN:' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                    break;
                case 12:
                    this.$ = [];
                    console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + yylineno + ', en la columna: ' + this._$.first_column);
                    break;
                case 13:
                case 50:
                case 51:
                    this.$ = $$[$0 - 1];
                    break;
                case 14:
                case 52:
                case 77:
                    this.$ = [];
                    break;
                case 15:
                case 17:
                case 22:
                    console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                    break;
                case 16:
                    break;
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                    this.$ = $$[$0];
                    break;
                case 31:
                    this.$ = new Type(types.NUMERIC);
                    console.log("TIPO INT");
                    break;
                case 32:
                    this.$ = new Type(types.STRING);
                    console.log("TIPO STRING");
                    break;
                case 33:
                    this.$ = new Type(types.BOOLEAN);
                    break;
                case 36:
                    console.log("sentencia_for");
                    break;
                case 39:
                case 40:
                    console.log("incre_decre");
                    break;
                case 45:
                    this.$ = new Print($$[$0 - 2], _$.first_line, _$.first_column);
                    break;
                case 46:
                    this.$ = new While($$[$0 - 1], $$[$0], _$.first_line, _$.first_column);
                    break;
                case 47:
                    this.$ = new If($$[$0 - 1], $$[$0], [], _$.first_line, _$.first_column);
                    console.log("if acept");
                    break;
                case 48:
                    this.$ = new If($$[$0 - 3], $$[$0 - 2], $$[$0], _$.first_line, _$.first_column);
                    break;
                case 49:
                    this.$ = new If($$[$0 - 3], $$[$0 - 2], [$$[$0]], _$.first_line, _$.first_column);
                    break;
                case 53:
                    this.$ = new Arithmetic($$[$0 - 1], null, '-', _$.first_line, _$.first_column);
                    break;
                case 54:
                    this.$ = new Arithmetic($$[$0 - 1], null, '!', _$.first_line, _$.first_column);
                    break;
                case 55:
                    this.$ = new Arithmetic($$[$0 - 2], $$[$0], '+', _$.first_line, _$.first_column);
                    break;
                case 56:
                    this.$ = new Arithmetic($$[$0 - 2], $$[$0], '-', _$.first_line, _$.first_column);
                    break;
                case 57:
                    this.$ = new Arithmetic($$[$0 - 2], $$[$0], '*', _$.first_line, _$.first_column);
                    break;
                case 58:
                    this.$ = new Arithmetic($$[$0 - 2], $$[$0], '/', _$.first_line, _$.first_column);
                    break;
                case 59:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '<', _$.first_line, _$.first_column);
                    break;
                case 60:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '>', _$.first_line, _$.first_column);
                    break;
                case 61:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '>=', _$.first_line, _$.first_column);
                    break;
                case 62:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '<=', _$.first_line, _$.first_column);
                    break;
                case 63:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '==', _$.first_line, _$.first_column);
                    break;
                case 64:
                    this.$ = new Relational($$[$0 - 2], $$[$0], '!=', _$.first_line, _$.first_column);
                    break;
                case 65:
                    this.$ = new Logic($$[$0 - 2], $$[$0], '&&', _$.first_line, _$.first_column);
                    break;
                case 66:
                    this.$ = new Logic($$[$0 - 2], $$[$0], '||', _$.first_line, _$.first_column);
                    break;
                case 67:
                    this.$ = new Primitive(new Type(types.NUMERIC), Number($$[$0]), _$.first_line, _$.first_column);
                    break;
                case 68:
                    this.$ = new Primitive(new Type(types.BOOLEAN), true, _$.first_line, _$.first_column);
                    break;
                case 69:
                    this.$ = new Primitive(new Type(types.BOOLEAN), false, _$.first_line, _$.first_column);
                    break;
                case 70:
                    this.$ = new Primitive(new Type(types.STRING), $$[$0].replace(/\"/g, ""), _$.first_line, _$.first_column);
                    break;
                case 71:
                    this.$ = new Identificador($$[$0 - 1], _$.first_line, _$.first_column);
                    break;
                case 72:
                    /*console.log("caracter");*/
                    break;
                case 73:
                    console.log("ENTERO");
                    break;
                case 74:
                    this.$ = $$[$0 - 1];
                    break;
                case 76:
                    this.$ = $$[$0 - 2];
                    break;
                case 96:
                    console.error('Este es un error sintáctico: [ ' + yytext + ' ] en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                    break;
                case 103:
                    console.log("tiene un metodo main :o");
                    break;
                case 107:
                    console.log("funcion");
                    break;
                case 109:
                    console.log("CON PARAMETROS");
                    break;
                case 110:
                    console.log("SIN PARAMETROS ");
                    break;
                case 112:
                    /*EPSILON*/
                    break;
            }
        },
        table: [{ 2: $V0, 3: 1, 4: 2, 5: [1, 5], 6: 3, 7: 4, 8: 6, 9: 7, 10: $V1, 13: $V2 }, { 1: [3] }, { 5: [1, 11] }, { 2: $V0, 5: [1, 12], 7: 13, 8: 14, 9: 7, 10: $V1, 13: $V2 }, { 2: $V0, 5: [1, 15], 9: 16, 13: $V2 }, { 1: [2, 4] }, o($V3, [2, 7]), o($V4, [2, 9]), { 11: [1, 17] }, { 11: [1, 18] }, o($V4, [2, 12]), { 1: [2, 1] }, { 1: [2, 2] }, { 2: $V0, 5: [2, 5], 9: 16, 13: $V2 }, o($V3, [2, 6]), { 1: [2, 3] }, o($V4, [2, 8]), { 12: [1, 19] }, { 12: [1, 20] }, o($V3, [2, 10]), o($V4, [2, 11])],
        defaultActions: { 5: [2, 4], 11: [2, 1], 12: [2, 2], 15: [2, 3] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], // token stack
            vstack = [null], // semantic value stack
            lstack = [], // location stack
            table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            //this.reductionCount = this.shiftCount = 0;
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }
                _handle_error: 
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';
                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;
                        // try to recover from error
                        for (;;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }
                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        }
                        else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    }
                    else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }
                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }
                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }
                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);
                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR; // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        // reduce
                        //this.reductionCount++;
                        len = this.productions_[action[1]][1];
                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        // accept
                        return true;
                }
            }
            return true;
        } };
    /* cada importe es un NODO del arbol ATS
     el patron interprete dice que se tiene que crear todo modular una clase por nodo */
    const { Primitive } = require('../Expresiones/Primitive');
    const { Arithmetic } = require('../Expresiones/Arithmetic');
    const { Relational } = require('../Expresiones/Relational');
    const { Continue } = require('../Expresiones/Continue');
    const { Break } = require('../Expresiones/Break');
    const { Logic } = require('../Expresiones/Logic');
    const { Identificador } = require('../Expresiones/Identificador');
    const { Print } = require('../Instrucciones/Print');
    const { If } = require('../Instrucciones/If');
    const { While } = require('../Instrucciones/While');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { Excepcion } = require('../utils/Exception');
    const { Type, types } = require('../utils/Type');
    const { Tree } = require('../Simbols/Tree');
    const { tacos } = require('../Expresiones/tacos');
    const { Importe } = require('../Otros/Importe');
    const { ClaseInstruccion } = require('../Otros/ClaseInstruccion');
    const { Inicio } = require('../Otros/Inicio');
    var esta_en_un_ciclo = false;
    var esta_en_un_metodo = false;
    var esta_en_una_funcion = false;
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-sensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: /* skip whitespace */
                        break;
                    case 1: /*se ignoran*/
                        break;
                    case 2:
                        break;
                    case 3: // comentario simple línea
                        break;
                    case 4: // comentario multiple líneas
                        break;
                    case 5:
                        return 76;
                        break;
                    case 6:
                        return 71;
                        break;
                    case 7:
                        return 77;
                        break;
                    case 8:
                        console.log("string LITERAL....");
                        return 74;
                        break;
                    case 9:
                        console.log("comBloque reconocido");
                        return 'comentarioBloque';
                        break;
                    case 10:
                        console.log("comLinea reconocido");
                        return 'comentarioLinea';
                        break;
                    case 11:
                        return 83;
                        break;
                    case 12:
                        return 62;
                        break;
                    case 13:
                        return 12;
                        break;
                    case 14:
                        console.log("decremento");
                        return 45;
                        break;
                    case 15:
                        return 58;
                        break;
                    case 16:
                        console.log("incremento");
                        return 44;
                        break;
                    case 17:
                        return 60;
                        break;
                    case 18:
                        return 61;
                        break;
                    case 19:
                        return '^';
                        break;
                    case 20:
                        return '%';
                        break;
                    case 21:
                        return 50;
                        break;
                    case 22:
                        return 63;
                        break;
                    case 23:
                        return 64;
                        break;
                    case 24:
                        return 66;
                        break;
                    case 25:
                        return 65;
                        break;
                    case 26:
                        return 67;
                        break;
                    case 27:
                        return 68;
                        break;
                    case 28:
                        return 69;
                        break;
                    case 29:
                        return 70;
                        break;
                    case 30:
                        return 59;
                        break;
                    case 31:
                        return 43;
                        break;
                    case 32:
                        return 93;
                        break;
                    case 33:
                        return 37;
                        break;
                    case 34:
                        return 41;
                        break;
                    case 35:
                        return 15;
                        break;
                    case 36:
                        return 17;
                        break;
                    case 37:
                        return 98;
                        break;
                    case 38:
                        return 53;
                        break;
                    case 39:
                        return 54;
                        break;
                    case 40:
                        return 51;
                        break;
                    case 41:
                        return 49;
                        break;
                    case 42:
                        return 99;
                        break;
                    case 43:
                        return 106;
                        break;
                    case 44:
                        return 56;
                        break;
                    case 45:
                        return 57;
                        break;
                    case 46:
                        return 78;
                        break;
                    case 47:
                        return 87;
                        break;
                    case 48:
                        return 82;
                        break;
                    case 49:
                        return 88;
                        break;
                    case 50:
                        return 104;
                        break;
                    case 51:
                        return 47;
                        break;
                    case 52:
                        return 46;
                        break;
                    case 53:
                        return 36;
                        break;
                    case 54:
                        return 73;
                        break;
                    case 55:
                        return 72;
                        break;
                    case 56:
                        return 13;
                        break;
                    case 57:
                        return 10;
                        break;
                    case 58:
                        return 35;
                        break;
                    case 59:
                        return 34;
                        break;
                    case 60:
                        return 31;
                        break;
                    case 61:
                        return 32;
                        break;
                    case 62:
                        return 33;
                        break;
                    case 63:
                        return 11;
                        break;
                    case 64:
                        return 5;
                        break;
                    case 65:
                        console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:[ \t\r\n\f])/, /^(?:\n)/, /^(?:\/\/.*)/, /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/, /^(?:(('[^☼]')))/, /^(?:([0-9]+(\.[0-9]+)))/, /^(?:([0-9]+))/, /^(?:(("[^☼]*[\\"]*")))/, /^(?:{comentarioBloque})/, /^(?:{comentarioLinea})/, /^(?::)/, /^(?:\/)/, /^(?:;)/, /^(?:--)/, /^(?:-)/, /^(?:\+\+)/, /^(?:\+)/, /^(?:\*)/, /^(?:\^)/, /^(?:%)/, /^(?:\.)/, /^(?:<)/, /^(?:>)/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:\|\|)/, /^(?:&&)/, /^(?:!)/, /^(?:=)/, /^(?:,)/, /^(?:\()/, /^(?:\))/, /^(?:\{)/, /^(?:\})/, /^(?:main\b)/, /^(?:println\b)/, /^(?:print\b)/, /^(?:out\b)/, /^(?:System\b)/, /^(?:void\b)/, /^(?:return\b)/, /^(?:if\b)/, /^(?:else\b)/, /^(?:switch\b)/, /^(?:case\b)/, /^(?:default\b)/, /^(?:break\b)/, /^(?:continue\b)/, /^(?:while\b)/, /^(?:do\b)/, /^(?:for\b)/, /^(?:false\b)/, /^(?:true\b)/, /^(?:class\b)/, /^(?:import\b)/, /^(?:char\b)/, /^(?:double\b)/, /^(?:int\b)/, /^(?:String\b)/, /^(?:boolean\b)/, /^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = graProyecto;
    exports.Parser = graProyecto.Parser;
    exports.parse = function () { return graProyecto.parse.apply(graProyecto, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

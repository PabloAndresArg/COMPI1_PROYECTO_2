/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var graProyecto = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,7],$V2=[1,8],$V3=[2,6,8,12],$V4=[2,6,12],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,26],$Vb=[2,18],$Vc=[10,42],$Vd=[2,99],$Ve=[1,45],$Vf=[1,48],$Vg=[16,30,31,32,33,34,98],$Vh=[1,52],$Vi=[1,51],$Vj=[1,56],$Vk=[1,64],$Vl=[1,67],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,65],$Vt=[1,66],$Vu=[9,16,30,31,32,33,34,35,45,46,48,55,77,87,98],$Vv=[2,111],$Vw=[1,70],$Vx=[1,74],$Vy=[1,89],$Vz=[1,87],$VA=[1,86],$VB=[1,84],$VC=[1,83],$VD=[1,85],$VE=[1,88],$VF=[1,93],$VG=[1,92],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[2,10,40,57,59,60,61,62,63,64,65,66,67,68,69,82,92],$VS=[9,16,30,31,32,33,34,35,45,46,48,55,56,77,87,98],$VT=[9,16,30,31,32,33,34,35,45,46,48,55,77,87],$VU=[1,115],$VV=[1,138],$VW=[2,10,40,57,59,62,63,64,65,66,67,68,69,82,92],$VX=[2,10,40,62,63,64,65,66,67,68,69,82,92],$VY=[2,10,40,66,67,68,69,82,92],$VZ=[40,92],$V_=[1,192],$V$=[16,81,86],$V01=[2,84],$V11=[1,213];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_IMPORTE":4,"LISTA_CLASES":5,"EOF":6,"IMPORTE":7,"import":8,"id":9,";":10,"SENTENCIA_CLASE":11,"class":12,"BLOQUE_DECLARACIONES_METFUNVAR":13,"{":14,"LISTA_DECLARACIONES_METFUNVAR":15,"}":16,"DECLARACION_AMBITO_CLASE":17,"LISTA_DECLARACIONES_METFUNVAR_P":18,"INSTRUCCIONES":19,"INSTRUCCION":20,"SENTENCIAIMPRIME":21,"WHILE":22,"IF":23,"DOWHILE":24,"SENTENCIA_FOR":25,"SENTENCIA_SWITCH":26,"ASIGNACION_SIMPLE":27,"DECLARACION_ADENTRO_DE_METODOS_FUNCIONES":28,"TIPO":29,"int":30,"String":31,"boolean":32,"double":33,"char":34,"for":35,"(":36,"DEC_for":37,"EXPRESION":38,"INCRE_DECRE":39,")":40,"BLOQUE_INSTRUCCIONES":41,"=":42,"incremento":43,"decremento":44,"do":45,"while":46,"CONDICION":47,"System":48,".":49,"out":50,"OPCIONIMPRIME":51,"println":52,"print":53,"PRINT":54,"if":55,"else":56,"-":57,"!":58,"+":59,"*":60,"/":61,"<":62,">":63,">=":64,"<=":65,"==":66,"!=":67,"||":68,"&&":69,"decimal":70,"true":71,"false":72,"STRING_LITERAL":73,"EXPRESION_METODO":74,"caracter":75,"entero":76,"switch":77,"BLOQUE_CASES":78,"LISTACASES":79,"OPCIONDEFAULT":80,"default":81,":":82,"BLOQUEINST_CON_OPCION_VACIA":83,"SENTENCIA_BREAK":84,"CASES_P":85,"case":86,"break":87,"OPCION_ASIGNACION":88,"SENTENCIA_LLAMA_METODO":89,"LISTA_EXPRESIONES_LLAMADA_METODO":90,"LISTA_EXPRESIONES_LLAMADA_METODOP":91,",":92,"DECLARACION_ADENTRO_DE_METODOS_FUNCIONESP":93,"LISTA_IDS":94,"ASIGNACION":95,"OPCION_ID_MAIN":96,"main":97,"void":98,"OPCION_METODO_FUNCION":99,"DECLARACION_AMBITO_CLASEP":100,"LISTA_PARAMETROS_CON_TIPO":101,"SENTENCIA_CONTINUE":102,"continue":103,"SENTENCIA_RETURN_METODO":104,"return":105,"SENTENCIA_RETURN_FUNCION":106,"SENTENCIA_BREAK_CON_CICLO":107,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"id",10:";",12:"class",14:"{",16:"}",30:"int",31:"String",32:"boolean",33:"double",34:"char",35:"for",36:"(",40:")",42:"=",43:"incremento",44:"decremento",45:"do",46:"while",48:"System",49:".",50:"out",52:"println",53:"print",55:"if",56:"else",57:"-",58:"!",59:"+",60:"*",61:"/",62:"<",63:">",64:">=",65:"<=",66:"==",67:"!=",68:"||",69:"&&",70:"decimal",71:"true",72:"false",73:"STRING_LITERAL",75:"caracter",76:"entero",77:"switch",81:"default",82:":",86:"case",87:"break",92:",",97:"main",98:"void",103:"continue",105:"return"},
productions_: [0,[3,3],[3,2],[3,2],[3,1],[4,2],[4,1],[7,3],[5,2],[5,1],[11,3],[11,1],[13,3],[13,2],[13,1],[15,2],[15,1],[18,2],[18,0],[19,2],[19,1],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[29,1],[29,1],[29,1],[29,1],[29,1],[25,9],[37,4],[37,3],[39,2],[39,2],[24,5],[21,9],[51,1],[51,1],[54,5],[22,3],[23,3],[23,5],[23,5],[47,3],[41,3],[41,2],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1],[38,1],[38,2],[38,1],[38,1],[38,3],[26,5],[78,4],[78,2],[80,4],[80,0],[79,2],[79,1],[85,5],[84,2],[83,1],[83,0],[27,2],[88,3],[88,3],[74,2],[74,0],[89,2],[89,1],[90,2],[91,3],[91,2],[91,1],[28,3],[93,2],[94,3],[94,0],[95,3],[95,1],[96,1],[96,1],[17,4],[17,3],[100,2],[100,2],[99,5],[99,2],[101,4],[101,0],[102,2],[104,2],[106,3],[107,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-2]); return this.$;
break;
case 2:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 3:
console.log("solo vienen importes en ese archivo");
break;
case 4:
this.$ = new Tree($$[$0]); return this.$;
break;
case 7:
console.log("venia un importe");
break;
case 11: case 14: case 16: case 21:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 12: case 49: case 50:
this.$ = $$[$0-1];
break;
case 13: case 51: case 76:
this.$ = [];
break;
case 22: case 24:
this.$ = $$[$0];
break;
case 23:
 /*console.log("ESTA EN UN WHILE"); */
break;
case 30:
this.$ = new Type(types.NUMERIC); console.log("TIPO INT"); 
break;
case 31:
this.$ = new Type(types.STRING); console.log("TIPO STRING")
break;
case 32:
this.$ = new Type(types.BOOLEAN);
break;
case 35:
console.log("sentencia_for");
break;
case 38: case 39:
console.log("incre_decre");
break;
case 44:
 this.$ = new Print($$[$0-2], _$.first_line, _$.first_column);
break;
case 45:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 46:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column); console.log("if acept");
break;
case 47:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 48:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 52:
 this.$ = new Arithmetic($$[$0-1], null, '-', _$.first_line, _$.first_column); 
break;
case 53:
 this.$ = new Arithmetic($$[$0-1], null, '!', _$.first_line, _$.first_column); 
break;
case 54:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 55:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 56:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 58:
 this.$ = new Relational($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 59:
 this.$ = new Relational($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 60:
 this.$ = new Relational($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column); 
break;
case 61:
 this.$ = new Relational($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 62:
 this.$ = new Relational($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Relational($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Logic($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 65:
 this.$ = new Logic($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Primitive(new Type(types.NUMERIC), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 67:
 this.$ = new Primitive(new Type(types.BOOLEAN), true, _$.first_line, _$.first_column); 
break;
case 68:
 this.$ = new Primitive(new Type(types.BOOLEAN), false, _$.first_line, _$.first_column); 
break;
case 69:
 this.$ = new Primitive(new Type(types.STRING), $$[$0].replace(/\"/g,""), _$.first_line, _$.first_column); 
break;
case 70:
 /*console.log("VIENE ID ");*/ 
break;
case 71:
/*console.log("caracter");*/
break;
case 72:
console.log("ENTERO");
break;
case 73:
 this.$ = $$[$0-1]; 
break;
case 75:
this.$ = $$[$0-2];
break;
case 95:
 console.error('Este es un error sintÃ¡ctico: [ ' + yytext + ' ] en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 102:
console.log("tiene un metodo main :o");
break;
case 106:
console.log("funcion");
break;
case 108:
console.log("CON PARAMETROS");
break;
case 109:
console.log("SIN PARAMETROS ");
break;
case 111:
/*EPSILON*/
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:[1,4],7:5,8:$V1,11:6,12:$V2},{1:[3]},{2:$V0,5:10,6:[1,11],7:12,8:$V1,11:6,12:$V2},{2:$V0,6:[1,13],11:14,12:$V2},{1:[2,4]},o($V3,[2,6]),o($V4,[2,9]),{9:[1,15]},{9:[1,16]},o($V4,[2,11]),{2:$V0,6:[1,17],11:14,12:$V2},{1:[2,3]},o($V3,[2,5]),{1:[2,2]},o($V4,[2,8]),{10:[1,18]},{2:[1,21],13:19,14:[1,20]},{1:[2,1]},o($V3,[2,7]),o($V4,[2,10]),{2:[1,25],15:22,16:[1,23],17:24,29:27,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,98:$Va},o($V4,[2,14]),{16:[1,33]},o($V4,[2,13]),{16:$Vb,17:35,18:34,29:27,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,98:$Va},{16:[2,16]},{9:[1,38],96:36,97:[1,37]},{9:[1,39]},{9:[2,30]},{9:[2,31]},{9:[2,32]},{9:[2,33]},{9:[2,34]},o($V4,[2,12]),{16:[2,15]},{16:$Vb,17:35,18:40,29:27,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,98:$Va},{36:[1,41]},{36:[2,102]},{36:[2,103]},o($Vc,$Vd,{100:42,94:44,36:[1,43],92:$Ve}),{16:[2,17]},{29:47,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,40:$Vf,99:46},o($Vg,[2,105]),{29:47,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,40:$Vf,99:49},{10:$Vh,42:$Vi,95:50},{9:[1,53]},o($Vg,[2,104]),{9:[1,54]},{14:$Vj,41:55},o($Vg,[2,106]),o($Vg,[2,107]),{9:$Vk,36:$Vl,38:57,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($Vu,[2,101]),o($Vc,$Vd,{94:68,92:$Ve}),{40:$Vv,92:$Vw,101:69},o($Vg,[2,109]),{2:$Vx,9:$Vy,16:[1,72],19:71,20:73,21:75,22:76,23:77,24:78,25:79,26:80,27:81,28:82,29:90,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Vz,45:$VA,46:$VB,48:$VC,55:$VD,77:$VE},{10:[1,91],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{9:$Vk,36:$Vl,38:104,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:105,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,89],{74:106,36:[1,107]}),o($VR,[2,71]),o($VR,[2,72]),{9:$Vk,36:$Vl,38:108,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($Vc,[2,98]),{40:[1,109]},{29:110,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9},{9:$Vy,16:[1,111],20:112,21:75,22:76,23:77,24:78,25:79,26:80,27:81,28:82,29:90,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Vz,45:$VA,46:$VB,48:$VC,55:$VD,77:$VE},o($VS,[2,51]),o($VT,[2,20]),o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,23]),o($VT,[2,24]),o($VT,[2,25]),o($VT,[2,26]),o($VT,[2,27]),o($VT,[2,28]),o($VT,[2,29]),{49:[1,113]},{36:$VU,47:114},{36:$VU,47:116},{14:$Vj,41:117},{36:[1,118]},{36:[1,119]},{36:[1,122],42:[1,121],88:120},{9:[1,123]},o($Vu,[2,100]),{9:$Vk,36:$Vl,38:124,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:125,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:126,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:127,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:128,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:129,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:130,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:131,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:132,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:133,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:134,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:135,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,70]),{9:$Vk,36:$Vl,38:139,40:$VV,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,89:136,90:137},{40:[1,140],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{14:$Vj,41:141},{9:[1,142]},o($VS,[2,50]),o($VT,[2,19]),{50:[1,143]},{14:$Vj,41:144},{9:$Vk,36:$Vl,38:145,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{14:$Vj,41:146},{46:[1,147]},{9:[1,150],29:149,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,37:148},{9:$Vk,36:$Vl,38:151,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($VT,[2,85]),{9:$Vk,36:$Vl,38:152,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:$Vk,36:$Vl,38:139,40:$VV,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,89:153,90:137},o($Vc,$Vd,{93:154,94:155,92:$Ve}),o($VW,[2,54],{60:$VH,61:$VI}),o($VW,[2,55],{60:$VH,61:$VI}),o($VR,[2,56]),o($VR,[2,57]),o($VX,[2,58],{57:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,59],{57:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,60],{57:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,61],{57:$VF,59:$VG,60:$VH,61:$VI}),o($VY,[2,62],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM}),o($VY,[2,63],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM}),o([2,10,40,68,82,92],[2,64],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,69:$VQ}),o([2,10,40,68,69,82,92],[2,65],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO}),o($VR,[2,88]),{40:[1,156]},o($VR,[2,91]),{2:[1,159],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,91:157,92:[1,158]},o($VR,[2,73]),o($Vg,[2,108]),{40:$Vv,92:$Vw,101:160},{49:[1,161]},o($VT,[2,45]),{40:[1,162],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},o($VT,[2,46],{56:[1,163]}),{36:$VU,47:164},{10:[1,165]},{9:[1,166]},{42:[1,167]},{40:[1,168],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{10:[1,169],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{10:[1,170]},o($VT,[2,96]),{10:$Vh,42:$Vi,95:171},o($VR,[2,90]),{40:[2,92],92:[1,172]},{9:$Vk,36:$Vl,38:173,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($VZ,[2,95]),{40:[2,110]},{51:174,52:[1,175],53:[1,176]},o([10,14],[2,49]),{14:$Vj,23:178,41:177,55:$VD},{10:[1,179]},{9:$Vk,36:$Vl,38:180,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{42:[1,181]},{9:$Vk,36:$Vl,38:182,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{14:[1,184],78:183},o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,97]),{9:$Vk,36:$Vl,38:185,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},o($VZ,[2,94],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ}),{36:[1,186]},{36:[2,42]},{36:[2,43]},o($VT,[2,47]),o($VT,[2,48]),o($VT,[2,40]),{10:[1,187],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{9:$Vk,36:$Vl,38:188,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{10:[2,37],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},o($VT,[2,74]),{16:[1,190],79:189,85:191,86:$V_},o($VZ,[2,93],{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ}),{9:$Vk,36:$Vl,38:193,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{9:[1,195],39:194},{10:[2,36],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{16:[2,78],80:196,81:[1,198],85:197,86:$V_},o($VT,[2,76]),o($V$,[2,80]),{9:$Vk,36:$Vl,38:199,57:$Vm,58:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt},{40:[1,200],57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ},{40:[1,201]},{43:[1,202],44:[1,203]},{16:[1,204]},o($V$,[2,79]),{82:[1,205]},{57:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,82:[1,206]},{10:[1,207]},{14:$Vj,41:208},{40:[2,38]},{40:[2,39]},o($VT,[2,75]),{2:$Vx,9:$Vy,19:210,20:73,21:75,22:76,23:77,24:78,25:79,26:80,27:81,28:82,29:90,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Vz,45:$VA,46:$VB,48:$VC,55:$VD,77:$VE,83:209,87:$V01},{2:$Vx,9:$Vy,19:210,20:73,21:75,22:76,23:77,24:78,25:79,26:80,27:81,28:82,29:90,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Vz,45:$VA,46:$VB,48:$VC,55:$VD,77:$VE,83:211,87:$V01},o($VT,[2,41]),o($VT,[2,35]),{84:212,87:$V11},{9:$Vy,20:112,21:75,22:76,23:77,24:78,25:79,26:80,27:81,28:82,29:90,30:$V5,31:$V6,32:$V7,33:$V8,34:$V9,35:$Vz,45:$VA,46:$VB,48:$VC,55:$VD,77:$VE,87:[2,83]},{84:214,87:$V11},{16:[2,77]},{10:[1,215]},o($V$,[2,81]),o($V$,[2,82])],
defaultActions: {4:[2,4],11:[2,3],13:[2,2],17:[2,1],25:[2,16],28:[2,30],29:[2,31],30:[2,32],31:[2,33],32:[2,34],34:[2,15],37:[2,102],38:[2,103],40:[2,17],160:[2,110],175:[2,42],176:[2,43],202:[2,38],203:[2,39],212:[2,77]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  /* cada importe es un NODO del arbol ATS
   el patron interprete dice que se tiene que crear todo modular una clase por nodo */
    const {Primitive} = require('../Expresiones/Primitive');
    const {Arithmetic} = require('../Expresiones/Arithmetic');
    const {Relational} = require('../Expresiones/Relational');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Logic} = require('../Expresiones/Logic');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Print} = require('../Instrucciones/Print');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {Excepcion} = require('../utils/Exception');
    const {Type, types} = require('../utils/Type');
    const {Tree} = require('../Simbols/Tree');
    const {tacos} = require('../Expresiones/tacos');
    console.log("se ejecuto el jison");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: /*se ignoran*/ 
break;
case 2:
break;
case 3:// comentario simple lÃ­nea
break;
case 4:// comentario multiple lÃ­neas
break;
case 5:return 75
break;
case 6:return 70
break;
case 7:;return 76
break;
case 8:return 73
break;
case 9:console.log("comBloque reconocido");return 'comentarioBloque'
break;
case 10:console.log("comLinea reconocido"); return 'comentarioLinea'
break;
case 11:return 82
break;
case 12:return 61
break;
case 13:return 10
break;
case 14:console.log("decremento");return 44
break;
case 15:return 57
break;
case 16:console.log("incremento"); return 43
break;
case 17:return 59
break;
case 18:return 60
break;
case 19:return '^'
break;
case 20:return '%'
break;
case 21:return 49
break;
case 22:return 62
break;
case 23:return 63
break;
case 24:return 65
break;
case 25:return 64
break;
case 26:return 66
break;
case 27:return 67
break;
case 28:return 68
break;
case 29:return 69
break;
case 30:return 58
break;
case 31:return 42
break;
case 32:return 92
break;
case 33:return 36
break;
case 34:return 40  
break;
case 35:return 14
break;
case 36:return 16
break;
case 37:return 97
break;
case 38:return 52
break;
case 39:return 53
break;
case 40:return 50 
break;
case 41:return 48
break;
case 42:return 98
break;
case 43:return 105
break;
case 44:return 55
break;
case 45:return 56
break;
case 46:return 77
break;
case 47:return 86
break;
case 48:return 81 
break;
case 49:return 87
break;
case 50:return 103
break;
case 51:return 46
break;
case 52:return 45
break;
case 53:return 35
break;
case 54:return 72
break;
case 55:return 71
break;
case 56:console.log("viene class :v"); return 12
break;
case 57:return 8
break;
case 58:return 34
break;
case 59:return 33  
break;
case 60:return 30
break;
case 61:return 31
break;
case 62:return 32
break;
case 63:return 9
break;
case 64:return 6
break;
case 65: console.error('Este es un error lÃ©xico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(('[^"]')))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:{comentarioBloque})/,/^(?:{comentarioLinea})/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = graProyecto;
exports.Parser = graProyecto.Parser;
exports.parse = function () { return graProyecto.parse.apply(graProyecto, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
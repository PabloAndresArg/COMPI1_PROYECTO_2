/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var graProyecto = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,8],$V2=[1,9],$V3=[2,5,10,13],$V4=[2,5,13],$V5=[1,21],$V6=[1,25],$V7=[1,43],$V8=[1,47],$V9=[1,48],$Va=[1,49],$Vb=[1,50],$Vc=[1,51],$Vd=[1,41],$Ve=[1,40],$Vf=[1,38],$Vg=[1,37],$Vh=[1,39],$Vi=[1,42],$Vj=[1,45],$Vk=[1,46],$Vl=[2,5,11,13,18,35,36,37,38,39,40,49,50,52,59,60,81,91,106,107],$Vm=[11,18,35,36,37,38,39,40,49,50,52,59,81,91,106,107],$Vn=[1,56],$Vo=[1,74],$Vp=[1,77],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,75],$Vx=[1,76],$Vy=[1,90],$Vz=[12,46],$VA=[2,103],$VB=[1,94],$VC=[1,97],$VD=[1,96],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[2,12,45,61,63,64,65,66,67,68,69,70,71,72,73,86,96],$VP=[45,96],$VQ=[2,12,45,61,63,66,67,68,69,70,71,72,73,86,96],$VR=[2,12,45,66,67,68,69,70,71,72,73,86,96],$VS=[2,12,45,70,71,72,73,86,96],$VT=[1,166],$VU=[18,85,90],$VV=[2,88],$VW=[1,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_IMPORTES_CLASES":4,"EOF":5,"LISTA_IMPORTE":6,"LISTA_CLASES":7,"IMPORTE":8,"SENTENCIA_CLASE":9,"import":10,"id":11,";":12,"class":13,"BLOQUE_INSTRUCCIONES":14,"BLOQUE_DECLARACIONES_METFUNVAR":15,"{":16,"LISTA_DECLARACIONES_METFUNVAR":17,"}":18,"DECLARACION_AMBITO_CLASE":19,"LISTA_DECLARACIONES_METFUNVAR_P":20,"INSTRUCCIONES":21,"INSTRUCCION":22,"SENTENCIAIMPRIME":23,"WHILE":24,"IF":25,"DOWHILE":26,"SENTENCIA_FOR":27,"SENTENCIA_SWITCH":28,"ASIGNACION_SIMPLE":29,"DECLARACION_ADENTRO_DE_METODOS_FUNCIONES":30,"SENTENCIA_CONTINUE":31,"SENTENCIA_RETURN_FUNCION":32,"SENTENCIA_RETURN_METODO":33,"TIPO":34,"int":35,"String":36,"boolean":37,"double":38,"char":39,"for":40,"(":41,"DEC_for":42,"EXPRESION":43,"INCRE_DECRE":44,")":45,"=":46,"incremento":47,"decremento":48,"do":49,"while":50,"CONDICION":51,"System":52,".":53,"out":54,"OPCIONIMPRIME":55,"println":56,"print":57,"PRINT":58,"if":59,"else":60,"-":61,"!":62,"+":63,"*":64,"/":65,"<":66,">":67,">=":68,"<=":69,"==":70,"!=":71,"||":72,"&&":73,"decimal":74,"true":75,"false":76,"STRING_LITERAL":77,"EXPRESION_METODO":78,"caracter":79,"entero":80,"switch":81,"BLOQUE_CASES":82,"LISTACASES":83,"OPCIONDEFAULT":84,"default":85,":":86,"BLOQUEINST_CON_OPCION_VACIA":87,"SENTENCIA_BREAK":88,"CASES_P":89,"case":90,"break":91,"OPCION_ASIGNACION":92,"SENTENCIA_LLAMA_METODO":93,"LISTA_EXPRESIONES_LLAMADA_METODO":94,"LISTA_EXPRESIONES_LLAMADA_METODOP":95,",":96,"DECLARACION_ADENTRO_DE_METODOS_FUNCIONESP":97,"LISTA_IDS":98,"ASIGNACION":99,"OPCION_ID_MAIN":100,"main":101,"void":102,"OPCION_METODO_FUNCION":103,"DECLARACION_AMBITO_CLASEP":104,"LISTA_PARAMETROS_CON_TIPO":105,"continue":106,"return":107,"SENTENCIA_BREAK_CON_CICLO":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"import",11:"id",12:";",13:"class",16:"{",18:"}",35:"int",36:"String",37:"boolean",38:"double",39:"char",40:"for",41:"(",45:")",46:"=",47:"incremento",48:"decremento",49:"do",50:"while",52:"System",53:".",54:"out",56:"println",57:"print",59:"if",60:"else",61:"-",62:"!",63:"+",64:"*",65:"/",66:"<",67:">",68:">=",69:"<=",70:"==",71:"!=",72:"||",73:"&&",74:"decimal",75:"true",76:"false",77:"STRING_LITERAL",79:"caracter",80:"entero",81:"switch",85:"default",86:":",90:"case",91:"break",96:",",101:"main",102:"void",106:"continue",107:"return"},
productions_: [0,[3,2],[3,2],[3,2],[3,1],[4,2],[6,2],[6,1],[7,2],[7,1],[8,3],[9,3],[9,1],[15,3],[15,2],[15,1],[17,2],[17,1],[20,2],[20,0],[21,2],[21,1],[21,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[34,1],[34,1],[34,1],[34,1],[34,1],[27,9],[42,4],[42,3],[44,2],[44,2],[26,5],[23,9],[55,1],[55,1],[58,5],[24,3],[25,3],[25,5],[25,5],[51,3],[14,3],[14,2],[43,2],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[43,1],[43,1],[43,1],[43,2],[43,1],[43,1],[43,3],[28,5],[82,4],[82,2],[84,4],[84,0],[83,2],[83,1],[89,5],[88,2],[87,1],[87,0],[29,2],[92,3],[92,3],[78,2],[78,0],[93,2],[93,1],[94,2],[95,3],[95,2],[95,1],[30,3],[97,2],[98,3],[98,0],[99,3],[99,1],[100,1],[100,1],[19,4],[19,3],[104,2],[104,2],[103,5],[103,2],[105,4],[105,0],[31,2],[33,2],[32,3],[108,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2: case 3:
this.$ = new Tree($$[$0-1]);console.log("se genera el arbol"); return this.$;
break;
case 4:
this.$ = new Tree($$[$0]);console.log("se genera el arbol"); return this.$;
break;
case 5:
let init =  new Inicio($$[$0-1], $$[$0]); this.$ = init.Lista_importes_clases
break;
case 6: case 8: case 20:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: case 9: case 21:
 this.$ = [$$[$0]]; 
break;
case 10:
this.$ = new Importe($$[$0-1], $$[$0-1] ,  this._$.first_line, this._$.first_column); console.log('TOKEN:' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 11:
this.$ = new ClaseInstruccion($$[$0-1], $$[$0] ,  this._$.first_line, this._$.first_column);
break;
case 12: case 15: case 17: case 22:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 13: case 53: case 54:
this.$ = $$[$0-1];
break;
case 14: case 19: case 55: case 80:
this.$ = [];
break;
case 16:
 this.$ = new Declaracion_ambito_clase($$[$0-1] , $$[$0]);
break;
case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33:
this.$ = $$[$0];
break;
case 34:
this.$ = new Type(types.INT); console.log("TIPO INT"); 
break;
case 35:
this.$ = new Type(types.STRING); console.log("TIPO STRING")
break;
case 36:
this.$ = new Type(types.BOOLEAN);
break;
case 37:
this.$ = new Type(types.DOUBLE);
break;
case 38:
this.$ = new Type(types.CHAR);
break;
case 39:
console.log("sentencia_for");
break;
case 42: case 43:
console.log("incre_decre");
break;
case 48:
 this.$ = new Print($$[$0-2], _$.first_line, _$.first_column);
break;
case 49:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 50:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column); console.log("if acept");
break;
case 51:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 52:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 56:
 this.$ = new Arithmetic($$[$0-1], null, '-', _$.first_line, _$.first_column); 
break;
case 57:
 this.$ = new Arithmetic($$[$0-1], null, '!', _$.first_line, _$.first_column); 
break;
case 58:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 59:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 60:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 61:
 this.$ = new Arithmetic($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 62:
 this.$ = new Relational($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Relational($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Relational($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column); 
break;
case 65:
 this.$ = new Relational($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Relational($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column); 
break;
case 67:
 this.$ = new Relational($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 68:
 this.$ = new Logic($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 69:
 this.$ = new Logic($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 70:
 this.$ = new Primitive(new Type(types.DOUBLE), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 71:
 this.$ = new Primitive(new Type(types.BOOLEAN), true, _$.first_line, _$.first_column); 
break;
case 72:
 this.$ = new Primitive(new Type(types.BOOLEAN), false, _$.first_line, _$.first_column); 
break;
case 73:
 this.$ = new Primitive(new Type(types.STRING), $$[$0].replace(/\"/g,""), _$.first_line, _$.first_column); 
break;
case 74:
 this.$ = new Identificador($$[$0-1], _$.first_line, _$.first_column); 
break;
case 75:
 this.$ = new Primitive(new Type(types.CHAR), $$[$0].replace(/\'/g,""), _$.first_line, _$.first_column); 
break;
case 76:
 this.$ = new Primitive(new Type(types.INT), Number($$[$0]) , _$.first_line, _$.first_column); 
break;
case 77:
 this.$ = $$[$0-1]; 
break;
case 79:
this.$ = $$[$0-2];
break;
case 99:
 console.error('Este es un error sintÃ¡ctico: [ ' + yytext + ' ] en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 106: case 107:
this.$ = $$[$0]
break;
case 108:
 this.$ = new Declaracion_ambito_clase($$[$0-3], $$[$0-2] , $$[$0-1] ,  _$.first_line , _$.first_column);
break;
case 110:
console.log("funcion");
break;
case 112:
console.log("CON PARAMETROS");
break;
case 113:
console.log("SIN PARAMETROS ");
break;
case 115:
/*EPSILON*/
break;
case 116:
this.$ = new Continue( $$[$0-1], this._$.first_line, this._$.first_column) ;
break;
case 117:
this.$ = new Return_metodo($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 118:
this.$ = new Return_metodo($$[$0-2], $$[$0-1] , this._$.first_line , this._$.first_column);
break;
case 119:
this.$ = new Break(this._$.first_line, this._$.first_column) ;
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,5],6:3,7:4,8:6,9:7,10:$V1,13:$V2},{1:[3]},{5:[1,11]},{2:$V0,5:[1,12],7:13,8:14,9:7,10:$V1,13:$V2},{2:$V0,5:[1,15],9:16,13:$V2},{1:[2,4]},o($V3,[2,7]),o($V4,[2,9]),{11:[1,17]},{11:[1,18]},o($V4,[2,12]),{1:[2,1]},{1:[2,2]},{2:$V0,5:[2,5],9:16,13:$V2},o($V3,[2,6]),{1:[2,3]},o($V4,[2,8]),{12:[1,19]},{14:20,16:$V5},o($V3,[2,10]),o($V4,[2,11]),{2:$V6,11:$V7,18:[1,23],21:22,22:24,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,31:34,32:35,33:36,34:44,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,49:$Ve,50:$Vf,52:$Vg,59:$Vh,81:$Vi,106:$Vj,107:$Vk},{11:$V7,18:[1,52],22:53,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,31:34,32:35,33:36,34:44,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,49:$Ve,50:$Vf,52:$Vg,59:$Vh,81:$Vi,106:$Vj,107:$Vk},o($Vl,[2,55]),o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),o($Vm,[2,32]),o($Vm,[2,33]),{53:[1,54]},{41:$Vn,51:55},{41:$Vn,51:57},{14:58,16:$V5},{41:[1,59]},{41:[1,60]},{41:[1,63],46:[1,62],92:61},{11:[1,64]},{12:[1,65]},{11:$Vo,12:[1,67],41:$Vp,43:66,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:[2,34]},{11:[2,35]},{11:[2,36]},{11:[2,37]},{11:[2,38]},o($Vl,[2,54]),o($Vm,[2,20]),{54:[1,78]},{14:79,16:$V5},{11:$Vo,41:$Vp,43:80,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{14:81,16:$V5},{50:[1,82]},{11:[1,85],34:84,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,42:83},{11:$Vo,41:$Vp,43:86,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($Vm,[2,89]),{11:$Vo,41:$Vp,43:87,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:91,45:$Vy,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx,93:88,94:89},o($Vz,$VA,{97:92,98:93,96:$VB}),o($Vm,[2,116]),{12:[1,95],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o($Vm,[2,117]),{11:$Vo,41:$Vp,43:108,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:109,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($VO,[2,70]),o($VO,[2,71]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,93],{78:110,41:[1,111]}),o($VO,[2,75]),o($VO,[2,76]),{11:$Vo,41:$Vp,43:112,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{53:[1,113]},o($Vm,[2,49]),{45:[1,114],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o($Vm,[2,50],{60:[1,115]}),{41:$Vn,51:116},{12:[1,117]},{11:[1,118]},{46:[1,119]},{45:[1,120],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{12:[1,121],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{12:[1,122]},{45:[1,123]},o($VO,[2,95]),{2:[1,126],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,95:124,96:[1,125]},o($Vm,[2,100]),{12:[1,129],46:[1,128],99:127},{11:[1,130]},o($Vm,[2,118]),{11:$Vo,41:$Vp,43:131,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:132,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:133,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:134,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:135,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:136,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:137,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:138,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:139,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:140,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:141,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:$Vo,41:$Vp,43:142,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($VO,[2,56]),o($VO,[2,57]),o($VO,[2,74]),{11:$Vo,41:$Vp,43:91,45:$Vy,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx,93:143,94:89},{45:[1,144],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{55:145,56:[1,146],57:[1,147]},o([12,16],[2,53]),{14:148,16:$V5,25:149,59:$Vh},{12:[1,150]},{11:$Vo,41:$Vp,43:151,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{46:[1,152]},{11:$Vo,41:$Vp,43:153,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{16:[1,155],82:154},o($Vm,[2,90]),o($Vm,[2,91]),o($VO,[2,94]),{45:[2,96],96:[1,156]},{11:$Vo,41:$Vp,43:157,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($VP,[2,99]),o($Vm,[2,101]),{11:$Vo,41:$Vp,43:158,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($Vm,[2,105]),o($Vz,$VA,{98:159,96:$VB}),o($VQ,[2,58],{64:$VE,65:$VF}),o($VQ,[2,59],{64:$VE,65:$VF}),o($VO,[2,60]),o($VO,[2,61]),o($VR,[2,62],{61:$VC,63:$VD,64:$VE,65:$VF}),o($VR,[2,63],{61:$VC,63:$VD,64:$VE,65:$VF}),o($VR,[2,64],{61:$VC,63:$VD,64:$VE,65:$VF}),o($VR,[2,65],{61:$VC,63:$VD,64:$VE,65:$VF}),o($VS,[2,66],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o($VS,[2,67],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ}),o([2,12,45,72,86,96],[2,68],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,73:$VN}),o([2,12,45,72,73,86,96],[2,69],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL}),o($VO,[2,92]),o($VO,[2,77]),{41:[1,160]},{41:[2,46]},{41:[2,47]},o($Vm,[2,51]),o($Vm,[2,52]),o($Vm,[2,44]),{12:[1,161],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{11:$Vo,41:$Vp,43:162,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{12:[2,41],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o($Vm,[2,78]),{18:[1,164],83:163,89:165,90:$VT},{11:$Vo,41:$Vp,43:167,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($VP,[2,98],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),{12:[1,168],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o($Vz,[2,102]),{11:$Vo,41:$Vp,43:169,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},{11:[1,171],44:170},{12:[2,40],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{18:[2,82],84:172,85:[1,174],89:173,90:$VT},o($Vm,[2,80]),o($VU,[2,84]),{11:$Vo,41:$Vp,43:175,61:$Vq,62:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,79:$Vw,80:$Vx},o($VP,[2,97],{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o($Vm,[2,104]),{45:[1,176],61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{45:[1,177]},{47:[1,178],48:[1,179]},{18:[1,180]},o($VU,[2,83]),{86:[1,181]},{61:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,86:[1,182]},{12:[1,183]},{14:184,16:$V5},{45:[2,42]},{45:[2,43]},o($Vm,[2,79]),{2:$V6,11:$V7,21:186,22:24,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,31:34,32:35,33:36,34:44,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,49:$Ve,50:$Vf,52:$Vg,59:$Vh,81:$Vi,87:185,91:$VV,106:$Vj,107:$Vk},{2:$V6,11:$V7,21:186,22:24,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,31:34,32:35,33:36,34:44,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,49:$Ve,50:$Vf,52:$Vg,59:$Vh,81:$Vi,87:187,91:$VV,106:$Vj,107:$Vk},o($Vm,[2,45]),o($Vm,[2,39]),{88:188,91:$VW},{11:$V7,22:53,23:26,24:27,25:28,26:29,27:30,28:31,29:32,30:33,31:34,32:35,33:36,34:44,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,49:$Ve,50:$Vf,52:$Vg,59:$Vh,81:$Vi,91:[2,87],106:$Vj,107:$Vk},{88:190,91:$VW},{18:[2,81]},{12:[1,191]},o($VU,[2,85]),o($VU,[2,86])],
defaultActions: {5:[2,4],11:[2,1],12:[2,2],15:[2,3],47:[2,34],48:[2,35],49:[2,36],50:[2,37],51:[2,38],146:[2,46],147:[2,47],178:[2,42],179:[2,43],188:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  /* cada importe es un NODO del arbol ATS
   el patron interprete dice que se tiene que crear todo modular una clase por nodo */
    const {Primitive} = require('../Expresiones/Primitive');
    const {Arithmetic} = require('../Expresiones/Arithmetic');
    const {Relational} = require('../Expresiones/Relational');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Logic} = require('../Expresiones/Logic');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Print} = require('../Instrucciones/Print');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {Excepcion} = require('../utils/Exception');
    const {Type, types} = require('../utils/Type');
    const {Tree} = require('../Simbols/Tree');
    const {tacos} = require('../Expresiones/tacos');
    const {Importe} = require('../Otros/Importe');
    const {ClaseInstruccion} = require('../Otros/ClaseInstruccion');
    const {Inicio} = require('../Otros/Inicio');
    const {Declaracion_ambito_clase} = require('../Otros/Inicio');
    const {Return_metodo} = require('../Instrucciones/Return_metodo');
    const {Return_funcion} = require('../Instrucciones/Return_funcion');



    var esta_en_un_ciclo = false;
    var esta_en_un_metodo = false ; 
    var esta_en_una_funcion = false; 
  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: /*se ignoran*/ 
break;
case 2:
break;
case 3:// comentario simple lÃ­nea
break;
case 4:// comentario multiple lÃ­neas
break;
case 5:return 79
break;
case 6:return 74
break;
case 7:return 80 
break;
case 8:console.log("string LITERAL....");return 77
break;
case 9:console.log("comBloque reconocido");return 'comentarioBloque'
break;
case 10:console.log("comLinea reconocido"); return 'comentarioLinea'
break;
case 11:return 86
break;
case 12:return 65
break;
case 13:return 12
break;
case 14:console.log("decremento");return 48
break;
case 15:return 61
break;
case 16:console.log("incremento"); return 47
break;
case 17:return 63
break;
case 18:return 64
break;
case 19:return '^'
break;
case 20:return '%'
break;
case 21:return 53
break;
case 22:return 66
break;
case 23:return 67
break;
case 24:return 69
break;
case 25:return 68
break;
case 26:return 70
break;
case 27:return 71
break;
case 28:return 72
break;
case 29:return 73
break;
case 30:return 62
break;
case 31:return 46
break;
case 32:return 96
break;
case 33:return 41
break;
case 34:return 45  
break;
case 35:return 16
break;
case 36:return 18
break;
case 37:return 101
break;
case 38:return 56
break;
case 39:return 57
break;
case 40:return 54 
break;
case 41:return 52
break;
case 42:return 102
break;
case 43:return 107
break;
case 44:return 59
break;
case 45:return 60
break;
case 46:return 81
break;
case 47:return 90
break;
case 48:return 85 
break;
case 49:return 91
break;
case 50:return 106
break;
case 51:return 50
break;
case 52:return 49
break;
case 53:return 40
break;
case 54:return 76
break;
case 55:return 75
break;
case 56:return 13
break;
case 57:return 10
break;
case 58:return 39
break;
case 59:return 38  
break;
case 60:return 35
break;
case 61:return 36
break;
case 62:return 37
break;
case 63:return 11
break;
case 64:return 5
break;
case 65:  console.error('Este es un error lÃ©xico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(('[^â¼]')))/,/^(?:([0-9]+(\.[0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("[^â¼]*[\\"]*")))/,/^(?:{comentarioBloque})/,/^(?:{comentarioLinea})/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = graProyecto;
exports.Parser = graProyecto.Parser;
exports.parse = function () { return graProyecto.parse.apply(graProyecto, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}